#import <Foundation/Foundation.h>
#import "trustcache.h"
#import "objcLogger.h"
#import "offsets.h"
#import "libkfd.h"
#import "krw.h"
#import "kcall.h"

BOOL insert_trustcache(uint64_t tcaddr) {
    uint64_t pmap_image4_trustcaches = off_trustcache + get_kernel_slide();
    uint64_t trustcache = kread64(pmap_image4_trustcaches);
    LOG_FMT(@"[*] trustcache: 0x%llx", trustcache);
    if (!trustcache) {
        kwrite64(pmap_image4_trustcaches, tcaddr);
        return YES;
    }
    uint64_t prev = 0;
    while (trustcache) {
        prev = trustcache;
        trustcache = kread64(trustcache);
    }
    kwrite64(prev, tcaddr);
    return YES;
}

uint64_t load_trustcache(NSString *path, uint64_t *back_addr) {
    NSData *data = [NSData dataWithContentsOfFile:path];
    if (data == nil) {
        LOG(@"[-] Failed to load trustcache");
        return 0;
    }

    trustcache_file *tc = (trustcache_file *)data.bytes;

    uint64_t alloc_size = sizeof(trustcache_page) + data.length;

    uint64_t tcaddr = kalloc(alloc_size);

    if (!tcaddr) {
        LOG(@"[-] Failed to allocate trustcache");
        return 0;
    }

//    uint64_t self_ptr = tcaddr + offsetof(trustcache_page, selfptr);
//    uint64_t next_ptr = tcaddr + offsetof(trustcache_page, nextptr);
//    uint64_t file_ptr = tcaddr + offsetof(trustcache_page, file);

    kwrite64(tcaddr + offsetof(trustcache_page, selfptr), tcaddr + offsetof(trustcache_page, file));

    for (int i = 0; i < data.length; ++i) {
        kwrite8(tcaddr + offsetof(trustcache_page, file) + i, ((uint8_t *)data.bytes)[i]);
    }

    if (!insert_trustcache(tcaddr)) {
        return 0;
    }
    *back_addr = tcaddr;
    return alloc_size;
}
